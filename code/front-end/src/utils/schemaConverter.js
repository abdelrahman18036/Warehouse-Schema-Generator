// Utility function to convert JSON schema to SQL
export const convertSchemaToSQL = (schema, schemaName = "Schema") => {
  if (!schema || typeof schema !== "object") {
    return `-- No ${schemaName} available`;
  }

  let sqlContent = `-- ${schemaName.toUpperCase()}\n-- Generated by Warehouse Schema Generator\n\n`;

  Object.entries(schema).forEach(([tableName, tableInfo]) => {
    if (!tableInfo || !tableInfo.columns || !Array.isArray(tableInfo.columns)) {
      return;
    }

    sqlContent += `CREATE TABLE ${tableName} (\n`;

    const columnDefinitions = tableInfo.columns
      .map((column) => {
        if (!column || typeof column !== "object") {
          return null;
        }

        const columnName = column.name || "unnamed_column";
        const columnType = column.type || "VARCHAR(255)";
        let constraints = column.constraints || [];

        // Ensure constraints is an array
        if (!Array.isArray(constraints)) {
          constraints = constraints ? [constraints] : [];
        }

        // Build column definition
        let columnDef = `    ${columnName} ${columnType}`;

        if (constraints.length > 0) {
          const constraintStr = constraints.join(" ");
          columnDef += ` ${constraintStr}`;
        }

        return columnDef;
      })
      .filter(Boolean);

    sqlContent += columnDefinitions.join(",\n");
    sqlContent += "\n);\n\n";
  });

  return sqlContent;
};

// Utility function to format JSON with proper indentation
export const formatJSON = (schema) => {
  if (!schema) {
    return "{}";
  }
  return JSON.stringify(schema, null, 2);
};

// Utility function to copy text to clipboard
export const copyToClipboard = async (text) => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (err) {
    // Fallback for older browsers
    const textArea = document.createElement("textarea");
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
      document.execCommand("copy");
      document.body.removeChild(textArea);
      return true;
    } catch (fallbackErr) {
      document.body.removeChild(textArea);
      return false;
    }
  }
};

// Utility function to download text as file
export const downloadAsFile = (
  content,
  filename,
  contentType = "text/plain"
) => {
  const blob = new Blob([content], { type: contentType });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
};
